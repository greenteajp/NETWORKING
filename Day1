DAY1:

Total Networking
https://miro.com/app/board/o9J_klSqCSY=/

Activity CTFd:
http://10.50.20.75:8000/login     JODO-006-M
Practice CTDFd:
http://10.50.22.14:8000/            SAME^

ssh student@10.50.21.119 -X   (password)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
NETWORK FUNDAMENTALS:
https://net.cybbh.io/-/public/-/jobs/699293/artifacts/modules/networking/slides/1-Network_Fundamentals.html
https://learningnetwork.cisco.com/s/question/0D53i00000KswgJCAR/magic-number-subnetting-introduction    ### vlsm cheat sheet

4 = nibble
8 = bytes
16 = half word
32 = word
64 = very long word

Standards:
https://www.ietf.org/standards/
IANA, assigns DNS, IPs, internet protocols


Physical Layer (OSI 1):
  -Hardware Specifications
  -Encoding and Signaling
  -Data Transmission and Reception
  -Physical Network Design
  
Data Link Layer (OSI 2):
  -MAC
  -LLC(Logical Link Control)
  -Ethernet Header
    -0x0800 ipv4
    -0806 ARP
    -86DD ipv6
    -8100 vlan tag
  -Arp Header
    -mac address resolution
    -man in the middle attack
  -802.1Q Header
    -VLAN
 SCAPY TOOL:
  -sudo scapy, manipulate frame/network data
    a=Ether()   ###basic ethernet header
    a.show()
    a.type=any header type
    
    b.Dot1Q()   ### specifically for VLANS
    b.show()
    b.vlan=#    ### name
    
    c=IP()      ### IP packet
    
    d=ICMP()      ### icmp packet
      
    sendp(a/b/c/d, iface="eth0")     ### sends packet
      
 Switching Tech:
 -fast forward, only dst MAC
 -frag free
    -IEEE 802.1AD "Q-in-Q"
    -double tagging
        0x88A8 - stnd double tag
        0x9100 - non-stnd double tag
 -STP
    ties multi dev together
    elect root bridge
      multi routes, can get into a loop if no root bridge
    disables alt routes
    determines routes via: 
        CDP (Cisco)
        FDP (Foundry)
        LLDP (Link Layer)
 -DTP
 -VTP 
      
      
      
      
      
Network Layer (OSI 3):
  -IPv4/6 Headers
  -Fingerprinting with TTLs/TCP window size
    Linux 64 TTL; 5840 TCP window size
    Google's custom Linux 64; 5720
    FreeBSD 64; 65535
    Windows XP 128; 65535
    Win7, Vista, Server 2k8 128; 8192
    Cisco (IOS 12.4) 255; 4128
  -netstat -ntlp, only listening ports
  -ICMPv4/6 Headers; adminsistrative protocol, mgmt, troubleshoooting (i.e ttl exceeded need more frags). 
    Error Reporting, flow control, first-hop gateway direction. Echo request/reply ( ping,traceroute)
  -Fragmentation, 1500byte segments. "MF" flag of 1 is more fragments, minus the last packet.
    Offset number orders the frags
    MTU 1500:
    1500-(5 x 4) = 1480
    1480/8= 185 offset
    Offset=0,185,370,555,740.
  -Zero Configuration
    IPv4; APIPA, RFC 3927 (192.168.0.0/16)
    IPv6; SLAAC, RFC4862  
      
Routing Tech:
  Default route - 0.0.0.0/0
  Lookup process via longest match
    i.e- ipdst = 172.16.0.10 -> 172.16.0.0/26 = 10101100.00010000.00000000.00,000000
  Admin Distance
    connected 0
    Static 1
    EIGRP sum route 5
    Ext BGP 20
    Int EIGRP 90
    IGRP 100
    OSPF 110
    IS-IS 115
    RIP 120
    Ext EIGRP 170
    Int BGP 200
 Static route priority over dynamic     
      
      
      
      
      
      
      
      
      
      
      
Transport Layer (OSI 4):
  -0-1024, well known ports
  -TCP
    TCP Flags in order: CWR, ECE,URG, ACK, PSH, RSt, SYN, FIN
    3-way handshake (SYN, SYN+ACK, ACK)
    PSH+ACK, needs more (Data transfer)
    FIN+ACK, ACK, FIN+ACK, ACK ends (4-way termination)
  -UDP
    No handshake, just sends data and forgets
    
Session Layer (OSI 5):
  -Protocols: 
  Socks 4/5 (TCP 1080)
    connections through proxy
    various client server exchange msgs
    client provide auth to server
    client req conn to server
  PPTP (TCP 1723)
    Obsolete method for VPn tunnels, known vulnerab
  L2TP (TCP 1701)
    Does not provide encryption itself, relie son other encryp
  SMB/CIFs(TCP139/445 and UDP 137/138)
    SMB rides over NetBIOS
      NetB Dgram -UDP 138
      NetB Session -TCP 139
      SAMBA/CIFs, versions of SMB
  RPC (ANY PORT)
    Basic request/response protocol
    JSON,XML,NFS,SOAP uses this
    
Presentation Layer (OSI 6):
  Translation, Formating(mp3,wav,jpeg,etc), Ecndoing(SCII,EBCDIC,HEX,BASE64)
  Encryption(Symmetric/Asymmetric) 

Application Layer (OSI 7):
 -FTP (TCP 20 Data/21 Control)
    Active/Passive
    Note reliable or secure
    Anonymous access
    Active
      Server/Client(high port and + 1) req
      NAT & firewall issues
      Complications with tunneling through SSH
      Passive solves issues w/ Active, better used in modern sys
 -SSH (TCP 22)
  Messaging provides
      Clien/server auth
      Asymm or PKI key exchange
      Symm for session
      User auth
      Data stream channeling
  Archit 1:
    Server
    Client
    Session
    Keys
      User Key -Asymm public key, user to server
      Host Key -Asymm public key, server to user
      Session Key -Symm key created by client and server to protect sess comms
      Key Gen
  Archit 2:
    Known-Host database - collection of host keys, used by client/server for mutual auth
    Agent-Store keys as a convenience for users
    Signer-signs the host-based auth packets
    Random Seed-used for entropy in creating pseudo-rand #s
    Config File-settings tht exist on client/server to dictate config of ssh/sshd
  SSH Concerns:
    Using passwd auth only
    Key rotation
    Key mgmt
    Implementation specification
 -Telnet (TCP 23):
 -SMTP (TCP 25):
 -TACACS (TCP 49)  Simple/Ext:
  Controls logins
 -HTTP(S) (TCP 80/443):
  Methods:
    GET/HEAD/POST/PUT
  HTTP status Codes:
    100,200,300,400
 -POP(TCP 110):
 -IMAP(TCP 143):
 -RDP (TCP 3389):
    Compression or Encryption support
    Desktop size and color depth
    Keyboard Mapping
    Remote system control
    Mouse-cursor color prop
 -DNS (Query/Response) (TCP/UDP 53):
    A,AAAA,CNAME,PTR,NS,MX,SOA,TXT
 -DHCP (UDP 67/68):
    Auto assign IPs
 -TFTP (UDP 69):
 -NTP (UDP 123):
 -SNMP (UDP 161 agent/162 manager):
    MGMT
    Set/Get req
    Get next/bulk
    response
    trap
    inform
 -RADIUS (UDP 1645/1646 AND 1812/183)
 -RTP (1024+):
    delivers audio.video
    streaming
  
Capture Library: 
  Libcap,WindPcap,NPCAP
  USER SIDE- WIRESHARK,TCPDUMP,BPFS
    
TCPDUMP:
    sudo tcpdump -D; shows interfaces on box
                 -i "iface name"
                 -X, shows hex dump
                 -XX, also shows ethernet header
                 -vv(v), very verbose
                 -w "name.pcap" to save output
                 -no options for just port and ips
                 -port #, specifies only for that port
              Operators:
                 - |, &&, !, <, >, <=, ==, !=, ...
              -'portrange 20-100'   
ex:
  sudo tcpdumnp -i eth0 -XXvv -w dump.pcap
  sudo tcpdump port 80 or 22; (80 | 22)
  sudo tcpdump "(src net 10.1.0.0/24 && (dst net 10.1.0.0/24) && (! dst host 10.1.0.3)"
  
BERKELEY PACKET FILTERS (BPF):
  req a SOCK_RAW socket and setsockopt calls SO_ATTACH_FILTER
tcpdump {A} [B:C] {D} {E} {F} {G}
  A = Protocol (ether | arp | ip | ip6 | icmp | tcp | udp)
  B = Header Byte offset
  C = optional: Byte Length. Can be 1, 2 or 4 (default 1)
  D = optional: Bitwise mask (&)
  E = Operator (= | == | > | < | <= | >= | != | () | << | >>)
  F = Result of Expresion
  G = optional: Logical Operator (&& ||) to bridge expressions
  Ex1:
    tcpdump 'ether[12:2] = 0x0800 && (tcp[2:2] != 22 && tcp[2:2] != 23)'
                ^byte 12 then next two
  
  Atleast one of the designated bits must be set to equal 0, like or statement
    tcp[13] & 0x11 !=0
  Have to match, others can be set
    tcp[13] & 0x11 = 0x11
  HAVE to match, will not look for others
    tcp[13] = 0x11
    --or--
    tcp[13] & 0xFF = 0x11




















