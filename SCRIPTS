STREAM
   #!/usr/bin/env python3
   import socket
   
   s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
   # This can also be accomplished by using s = socket.socket(), because Af_INET, and SOCK_STREAM are defaults.
   
   ipaddr ='127.0.0.1'
   port =54321
   
  s.connect((ipaddr, port))
  
  #To send a string as a bytes-like object, add the prefix b to the string. \n is used to go to the next line
  s.send(b'Hello\n')
  
  #It is recommended that the buffersize used with recvfrom is a power of 2 and not a very large number of bits
  response, conn = s.recvfrom(1024)
  
  # In order to receive a message that is sent as bytes-like object, you must decode into utf-8 (default)
  print(response.decode())
  
  s.close()
  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 DGRAM  
   #!/usr/bin/env python3
   
   import socket
   
   s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
   
   ipaddr = '127.0.0.1'
   port= 54321
   
  # To send a string as a byte-like object, add the prefix b to the string. \n is used to go to the next line
  s.sendto(b'Hello\n',(ipaddr,port))
  
  # It is recommended that the buffersize used with recvfrom is a power of 2 and not a very large number of bits
  response, conn = s.recvfrom(1024)
  
  # In order to receive a message that is sent as a bytes-like object you must decode into UTF-8 (default)
  print(response.decode())
  
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
RAWIPV4SOCK
#!/usr/bin/env python3

# For building the socket 
import socket

# For system level commands
import sys

# For establishing the packet structure. This will allow direct access to the methods and functions in the struct mode
from struct import *

# Create a raw socket
try:
    s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)
except socket.error as msg:
    print(msg)
    sys.exit()

packet = ''
src_ip = "10.1.0.2"
dst_ip = "10.3.0.2"

# add the IPv4 header information
ip_ver_ihl = 69  #this is putting the decimal conversion off 0x45 for the version and Internet Header length
ip_tos = 0       #this combines the DSCP and ECN fields
ip_len = 0       #the kernel will fill in the actual length of the packet
ip_id = 12345    #this sets the IP identification for the packet
ip_frag = 0      #this sets frag to off
ip_ttl = 64      #this determines the TTL of the packet when leaving the machine
ip_proto = 16    #this sets up the IP proto to 16 (CHAOS). If this was 6 (TCP) or 17 (UDP) additional headers would be required
ip_check = 0     #the kernel will fill in the checksum for the packet
ip_srcadd = socket.inet_aton(src_ip)    # inet_aton(srting) will convert and IP address to a 32 bit binary number
ip_dstadd = socket.inet_aton(dst_ip)    # inet_aton(srting) will convert and IP address to a 32 bit binary number

ip_header = pack('!BBHHHBBH4s4s' , ip_ver_ihl, ip_tos, ip_len, ip_id, ip_frag, ip_ttl, ip_proto, ip_check, ip_srcadd, ip_dstadd)


user_data = b'DoughertyDelapaz'
hidden_msg = binascii.hexlify(user_data)

message = b'This is a message'
packet = ip_header + message  

# Send the packet
s.sendto(packet, (dst_ip, 0))

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
RAWTCPIPV4SOCKET
#!/usr/bin/env python3

# For building the socket 
import socket

#For doing an array in the TCP checksum
import array

# For system level commands
import sys

# For establishing the packet structure. This will allow direct access to the methods and functions in the struct mode
from struct import *

# Create a raw socket
try:
    s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)
except socket.error as msg:
    print(msg)
    sys.exit()

packet = ''
src_ip = "10.1.0.2"
dst_ip = "10.3.0.2"


# add the IPv4 header information
ip_ver_ihl = 69  #this is putting the decimal conversion off 0x45 for the version and Internet Header length
ip_tos = 0       #this combines the DSCP and ECN fields
ip_len = 0       #the kernel will fill in the actual length of the packet
ip_id = 12345    #this sets the IP identification for the packet
ip_frag = 0      #this sets frag to off
ip_ttl = 64      #this determines the TTL of the packet when leaving the machine
ip_proto = 6    #this sets up the IP proto to 16 (CHAOS). If this was 6 (TCP) or 17 (UDP) additional headers would be required
ip_check = 0     #the kernel will fill in the checksum for the packet
ip_srcadd = socket.inet_aton(src_ip)    # inet_aton(srting) will convert and IP address to a 32 bit binary number
ip_dstadd = socket.inet_aton(dst_ip)    # inet_aton(srting) will convert and IP address to a 32 bit binary number

ip_header = pack('!BBHHHBBH4s4s' , ip_ver_ihl, ip_tos, ip_len, ip_id, ip_frag, ip_ttl, ip_proto, ip_check, ip_srcadd, ip_dstadd)


# TCP Header Fields
tcp_src = 54321     #source port
tcp_dst = 1234      #destination port
tcp_seq = 90210     #sequence number
tcp_ack_seq = 30905 #tcp ack seq num
tcp_data_off = 5    #data offset specifying the size of the tcp header *4 which is 20
tcp_reserve = 0     #the 3 reserve bits + ns flag in reverse field
tcp_flags = 0       #tcp flags field before the bits are turned oon
tcp_win = 65535     #max allowed window size reordered to network order
tcp_chk = 0         #tcp checksum which will be calculated later on
tcp_urg_ptr = 0     #urgent pointer only if urg flag is set


#Combine the left shieftd 4 bit tcp offset and the reserve field
tcp_off_res = (tcp_data_off << 4) + tcp_reserve


# Tcp flags by bit starting from right to left
tcp_fin = 0                           # Finished
tcp_syn = 1                           # Synchronization
tcp_rst = 0                           # Reset
tcp_psh = 0                           # Push
tcp_ack = 0                           # Acknowledgment
tcp_urg = 0                           # Urgent
tcp_ece = 0                           # Explicit Congestion Notification Echo
tcp_cwr = 0                           # Congestion Window Reduced

# Combine the tcp flags by left shifting the bit locations and adding the bits together
tcp_flags = tcp_fin + (tcp_syn << 1) + (tcp_rst << 2) + (tcp_psh << 3) + (tcp_ack << 4) + (tcp_urg << 5) + (tcp_ece << 6) + (tcp_cwr << 7)


#The ! in the pack format string means network order
tcp_hdr = pack('!HHLLBBHHH',tcp_src, tcp_dst, tcp_seq, tcp_ack_seq, tcp_off_res, tcp_flags, tcp_win, tcp_chk, tcp_urg_ptr)

user_data = b'Hello! Is this hidden?'


#Psuedo Header Fields
src_address = socket.inet_aton(src_ip)
dst_address = socket.inet_aton(dst_ip)
reserved = 0
protocol = socket.IPPROTO_TCP
tcp_length = len(tcp_hdr) + len(user_data)

#Pack the pseudo header and combine with user data
ps_hdr = pack('!4s4sBBH', src_address, dst_address, reserved, protocol, tcp_length)
ps_hdr = ps_hdr + tcp_hdr + user_data


def checksum(data):
    if len(data) % 2 != 0:
        data += b'\0'
        res = sum(array.array("H", data))
        res = (res >> 16) + (res & 0xffff)
        res += res >> 16
        return (~res) & 0xffff


tcp_check = checksum(ps_hdr)

#Pack the tcp header to fill in the correct checksum - remember checksum is NOT in the network byte order
tcp_hdr = pack('!HHLLBBH', tcp_src, tcp_dst, tcp_seq, tcp_ack_seq, tcp_off_res, tcp_flags, tcp_win) + pack('H', tcp_chk) + pack('!H', tcp_urg_ptr)

# Combine all of the headers and the user data
packet = ip_header + tcp_hdr + user_data

# Send the packet
s.sendto(packet, (dst_ip, 0))
---------------------------------------------------------------------------------------------------------------------------------------------------------------
SCAN SCRIPT
#!/bin/bash
echo "Enter network address (e.g. 192.168.0): "
read net
echo "Enter starting host range (e.g. 1): "
read start
echo "Enter ending host range (e.g. 254): "
read end
echo "Enter ports space-delimited (e.g. 21-23 80): "
read ports
for ((i=$start; $i<=$end; i++))
do
    nc -nvzw1 $net.$i $ports 2>&1 | grep -E 'succ|open'
done
# (-v) running verbosely (-v on Linux, -vv on Windows),
# (-n) not resolving names. numeric only IP(no D.S)
# (-z) without sending any data. zero-I/O mode(used for scanning)
#(-w1) waiting no more than 1second for a connection to occur
# (2>&1) redirect STDERR to STDOUT. Results of scan are errors and need to redirect to output to grep
# (-E) Interpret PATTERN as an extended regular expression
# ( | grep open) for Debian to display only open connections
# ( | grep succeeded) for Ubuntu to display only the open connections


function enum () {
hostname
ip a
ss -ntlp
ip neigh
ls /usr/cctc/share
which tcpdump wireshark nmap
}
enum 



