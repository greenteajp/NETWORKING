DAY1:

Total Networking
https://miro.com/app/board/o9J_klSqCSY=/

Activity CTFd:
http://10.50.20.75:8000/login     JODO-006-M
Practice CTDFd:
http://10.50.22.14:8000/            SAME^

ssh student@10.50.21.119 -X   (password)

curl cht.sh/nc

.vimrc
  1 syntax enable
  2 set tabstop=4
  3 set shiftwidth=4
  4 set expandtab
  5 set number
  6 filetype indent on
  7 set autoindent                                                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
NETWORK FUNDAMENTALS:
https://net.cybbh.io/-/public/-/jobs/699293/artifacts/modules/networking/slides/1-Network_Fundamentals.html
https://learningnetwork.cisco.com/s/question/0D53i00000KswgJCAR/magic-number-subnetting-introduction    ### vlsm cheat sheet

4 = nibble
8 = bytes
16 = half word
32 = word
64 = very long word

Standards:
https://www.ietf.org/standards/
IANA, assigns DNS, IPs, internet protocols


Physical Layer (OSI 1):
  -Hardware Specifications
  -Encoding and Signaling
  -Data Transmission and Reception
  -Physical Network Design
  
  
Data Link Layer (OSI 2):
  -MAC
  -LLC(Logical Link Control)
  -Ethernet Header
    -0x0800 ipv4
    -0806 ARP
    -86DD ipv6
    -8100 vlan tag
  -Arp Header
    -mac address resolution
    -man in the middle attack
  -802.1Q Header
    -VLAN
 SCAPY TOOL:
  -sudo scapy, manipulate frame/network data
    a=Ether()   ###basic ethernet header
    a.show()
    a.type=any header type
    
    b.Dot1Q()   ### specifically for VLANS
    b.show()
    b.vlan=#    ### name
    
    c=IP()      ### IP packet
    
    d=ICMP()      ### icmp packet
      
    sendp(a/b/c/d, iface="eth0")     ### sends packet
      
 Switching Tech:
 -fast forward, only dst MAC
 -frag free
    -IEEE 802.1AD "Q-in-Q"
    -double tagging
        0x88A8 - stnd double tag
        0x9100 - non-stnd double tag
 -STP
    ties multi dev together
    elect root bridge
      multi routes, can get into a loop if no root bridge
    disables alt routes
    determines routes via: 
        CDP (Cisco)
        FDP (Foundry)
        LLDP (Link Layer)
 -DTP
 -VTP 
      
      
Network Layer (OSI 3):
  -IPv4/6 Headers
  -Fingerprinting with TTLs/TCP window size
    Linux 64 TTL; 5840 TCP window size
    Google's custom Linux 64; 5720
    FreeBSD 64; 65535
    Windows XP 128; 65535
    Win7, Vista, Server 2k8 128; 8192
    Cisco (IOS 12.4) 255; 4128
  -netstat -ntlp, only listening ports
  -ICMPv4/6 Headers; adminsistrative protocol, mgmt, troubleshoooting (i.e ttl exceeded need more frags). 
    Error Reporting, flow control, first-hop gateway direction. Echo request/reply ( ping,traceroute)
  -Fragmentation, 1500byte segments. "MF" flag of 1 is more fragments, minus the last packet.
    Offset number orders the frags
    MTU 1500:
    1500-(5 x 4) = 1480
    1480/8= 185 offset
    Offset=0,185,370,555,740.
  -Zero Configuration
    IPv4; APIPA, RFC 3927 (192.168.0.0/16)
    IPv6; SLAAC, RFC4862  
      
Routing Tech:
  Default route - 0.0.0.0/0
  Lookup process via longest match
    i.e- ipdst = 172.16.0.10 -> 172.16.0.0/26 = 10101100.00010000.00000000.00,000000
  Admin Distance
    connected 0
    Static 1
    EIGRP sum route 5
    Ext BGP 20
    Int EIGRP 90
    IGRP 100
    OSPF 110
    IS-IS 115
    RIP 120
    Ext EIGRP 170
    Int BGP 200
 Static route priority over dynamic     
      
      
Transport Layer (OSI 4):
  -0-1024, well known ports
  -TCP
    TCP Flags in order: CWR, ECE,URG, ACK, PSH, RSt, SYN, FIN
    3-way handshake (SYN, SYN+ACK, ACK)
    PSH+ACK, needs more (Data transfer)
    FIN+ACK, ACK, FIN+ACK, ACK ends (4-way termination)
  -UDP
    No handshake, just sends data and forgets
    
    
Session Layer (OSI 5):
  -Protocols: 
  Socks 4/5 (TCP 1080)
    connections through proxy
    various client server exchange msgs
    client provide auth to server
    client req conn to server
  PPTP (TCP 1723)
    Obsolete method for VPn tunnels, known vulnerab
  L2TP (TCP 1701)
    Does not provide encryption itself, relie son other encryp
  SMB/CIFs(TCP139/445 and UDP 137/138)
    SMB rides over NetBIOS
      NetB Dgram -UDP 138
      NetB Session -TCP 139
      SAMBA/CIFs, versions of SMB
  RPC (ANY PORT)
    Basic request/response protocol
    JSON,XML,NFS,SOAP uses this
    
    
Presentation Layer (OSI 6):
  Translation, Formating(mp3,wav,jpeg,etc), Ecndoing(SCII,EBCDIC,HEX,BASE64)
  Encryption(Symmetric/Asymmetric) 


Application Layer (OSI 7):
 -FTP (TCP 20 Data/21 Control)
    Active/Passive
    Note reliable or secure
    Anonymous access
    Active
      Server/Client(high port and + 1) req
      NAT & firewall issues
      Complications with tunneling through SSH
      Passive solves issues w/ Active, better used in modern sys
 -SSH (TCP 22)
  Messaging provides
      Clien/server auth
      Asymm or PKI key exchange
      Symm for session
      User auth
      Data stream channeling
  Archit 1:
    Server
    Client
    Session
    Keys
      User Key -Asymm public key, user to server
      Host Key -Asymm public key, server to user
      Session Key -Symm key created by client and server to protect sess comms
      Key Gen
  Archit 2:
    Known-Host database - collection of host keys, used by client/server for mutual auth
    Agent-Store keys as a convenience for users
    Signer-signs the host-based auth packets
    Random Seed-used for entropy in creating pseudo-rand #s
    Config File-settings tht exist on client/server to dictate config of ssh/sshd
  SSH Concerns:
    Using passwd auth only
    Key rotation
    Key mgmt
    Implementation specification
 -Telnet (TCP 23):
 -SMTP (TCP 25):
 -TACACS (TCP 49)  Simple/Ext:
  Controls logins
 -HTTP(S) (TCP 80/443):
  Methods:
    GET/HEAD/POST/PUT
  HTTP status Codes:
    100,200,300,400
 -POP(TCP 110):
 -IMAP(TCP 143):
 -RDP (TCP 3389):
    Compression or Encryption support
    Desktop size and color depth
    Keyboard Mapping
    Remote system control
    Mouse-cursor color prop
 -DNS (Query/Response) (TCP/UDP 53):
    A,AAAA,CNAME,PTR,NS,MX,SOA,TXT
 -DHCP (UDP 67/68):
    Auto assign IPs
 -TFTP (UDP 69):
 -NTP (UDP 123):
 -SNMP (UDP 161 agent/162 manager):
    MGMT
    Set/Get req
    Get next/bulk
    response
    trap
    inform
 -RADIUS (UDP 1645/1646 AND 1812/183)
 -RTP (1024+):
    delivers audio.video
    streaming
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Capture Library: 
  Libcap,WindPcap,NPCAP
  USER SIDE- WIRESHARK,TCPDUMP,BPFS
    
TCPDUMP:
    sudo tcpdump -D; shows interfaces on box
                 -i "iface name"
                 -X, shows hex dump
                 -XX, also shows ethernet header
                 -vv(v), very verbose
                 -w "name.pcap" to save output
                 -no options for just port and ips
                 -port #, specifies only for that port
              Operators:
                 - |, &&, !, <, >, <=, ==, !=, ...
              -'portrange 20-100'   
ex:
  sudo tcpdumnp -i eth0 -XXvv -w dump.pcap
  sudo tcpdump port 80 or 22; (80 | 22)
  sudo tcpdump "(src net 10.1.0.0/24 && (dst net 10.1.0.0/24) && (! dst host 10.1.0.3)"
  
BERKELEY PACKET FILTERS (BPF):
  req a SOCK_RAW socket and setsockopt calls SO_ATTACH_FILTER
tcpdump {A} [B:C] {D} {E} {F} {G}
  A = Protocol (ether | arp | ip | ip6 | icmp | tcp | udp)
  B = Header Byte offset
  C = optional: Byte Length. Can be 1, 2 or 4 (default 1)
  D = optional: Bitwise mask (&)
  E = Operator (= | == | > | < | <= | >= | != | () | << | >>)
  F = Result of Expresion
  G = optional: Logical Operator (&& ||) to bridge expressions
  Ex1:
    tcpdump 'ether[12:2] = 0x0800 && (tcp[2:2] != 22 && tcp[2:2] != 23)'
                ^byte 12 then next two
  
  Atleast one of the designated bits must be set to equal 0, like or statement
    tcp[13] & 0x11 !=0
  Have to match, others can be set
    tcp[13] & 0x11 = 0x11
  HAVE to match, will not look for others
    tcp[13] = 0x11
    --or--
    tcp[13] & 0xFF = 0x11
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
PACKET CREATION AND SOCKET PROGRAMMING:

Socket Types:
 -User Space Sockets:
    most common sockets that do not req elevated priv to perform actions on behalf of user apps.  
    using tcpdump, or wireshark to read a file
    using nmap w/ no switches
    using netcat to conn to a listener
    using netcat to create a listener w/ 1024+
    using /dev/tcp or /dev/udp to transmit data
   Stream Sockets:
    conn oriented and sequenced; methods for conn est. and tear-down. Used with TCP,SCTP,Bluetooth
   Datagram Sockets:
    connless; designed for quickly sending and rec. data. Used with UDP
    
    
 -Kernel Space Sockets:
    attempts to access hardware directly on behalf of a user app to either prevent encap/decap or to create packets from scratch, req elev priv
    using wireshark/tcpdump to capture packets
    using nmap for OS ident or set specific flags when scanning
    using netcat to create a list in 0-1023 ports
    using Scapy to craft/modify a packet for transm
    using Python to craft/mod Raw Sockets for transm
    Network devices sung routing protocols, i.e OSPF
   Raw Sockets:
    direct sending and rec. of IP packets w/out auto proto-specific formatting
    all headers typically included in packet and not removed
    used in nmap, tcpdump, wireshark
      
      
Python:
  Python Libs:
   Libs - contains own modules
    Modules - file consisting of python code: struct, socket, sys
      functions - block of organiz code: struct.pack, socket.socket, "user-defined"
      exceptions - attempting to execute w/out proper perm, ctrl + c, attempt access file not existing
      constants - value not change in a spec time: AF_INET/6, SOCK_STREAM, etc.
      objects - socket.bind(addr), socket.connect(addr), socket.send(bytes[,flags]), socket.close()
      types -Arrays: List, Tuple, Set, Dict; Data Types: int, float, complex, str, 
      
  Network sockets primarily use the Python3 Socket library and socket.socket function.
  import socket
  s = socket.socket(socket.FAMILY, socket.TYPE, socket.PROTOCOL)
  inside socket.socket.functions you have these arguments in order:
    socket.socket([*family*[,*type*[*proto*]]])
    family constants should be: AF_INET (default), AF_INET6, AF_UNIX
    type constants should be: SOCK_STREAM (default), SOCK_DGRAM, SOCK_RAW
    proto constants should be: 0 (default), IPPROTO_RAW
send() - TCP
sendto() - UDP

echo "I got your message" | nc -lp 54321
run stream.py


Raw IPv4 Sockets:
  raw socket scripts must include IP header and next headers
  use for testing specific def mech-such as triggering IDSs, filtering
  avoiding def mech
  obfusc data on transfer
  manually craft packet w/ chosen data in header fields, not automatic
Encoding and Decoding:
  encoding:
    process of taking bits and conver using specif cipher
  decoding:
    reverse of conver process used by specif cipher for encode
  common encodes:
    UTF-8,BASE64,Hex

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Network Reconnasissance:
https://net.cybbh.io/-/public/-/jobs/699293/artifacts/modules/networking/slides/3-Network_Reconnaissance.html
Types:
  https://git.cybbh.space/net/public/raw/master/modules/networking/slides/images/Recon2.png
  
 ACTIVE
  Internal:
    DNS Queries
    ARP requests
  External:
    Network Scanning
    
 PASSIVE
  Interal:
    Packet Sniffer
  External:
    DNs lookups
    Whois
    Job Site Listings
  Gethering info about tgts w/out direct interaction
  not as straight forward, req more time than active recon
  lower risk
  involves identifying:
    IP addr and sub-domains
    external and 3rd prty sites
    people and tech
    content of interest
    vuln
  Possible tools:
    WHOIS queries
    Job site listings
    phone numbers
    google searches
    passive OS fingerp
  External network recon: 
    info gathered outeside of net using passive methods
    allows for more efficient attacks and plans
    DNS:
      Resolves hostnames to IP addr
      RFC 3912
      WHOIS queries
    Dig:
      Typically btw primary and second DNs servers
      If allowed to transfer externally hostnames, IPs, and IP blocks can be determined
      dig axfr "dns transfer"
    Zone Tranfers:
      return dns info
      supplements base queries
    Host history:
      netcraft
      wayback machine (webiste for internet archives)
    Google searches:
      subdomains
      tech
      *ccboe.net -site:*ccboe.net
      Explouit database for "google hacking database"
    Shodan:
      reveals info abt tech, remote access services, improperly config services, and net infrast
      when selected can give additional info and applicable vuln
      exploits defaults, AOTs
      
 Internal
 External

Network Scanning:
  Scanning Strat:
     remote to local
     local to remote
     local to local
     remote to remote
  Scanning Approach:
    Aim
      wide range tgt scan   # just to find stuff
      tgt specific scan
    Method
      single source scan
      distributed scan  # mult scans/mult pc
  SCANS:
       broadcast ping/ping sweep, sends to everything, easiest, not always reliable, secured often for only internal pings (CLI ninja ping sweep, rubyguides)
       arp scan, dont are about ping/dns/etc, only a physicall connected device will have a arp cache; 
       syn scan (only syn probe); full connect scan (if tcp connection can be established); null scan (tcp conn with no flags); fin scan (no convo); (TCP scans)
       xmas scan(syn/fin/ack or every flag checked) 
       udp scan (usually non responding, need something i.e a nc); idle scan; ack/windows scan
       rpc scan; ftp scan; decoy scan; OS fingerp scan; version scan; protocol ping; discovery probes; SCTP init scan
  ex:
    nmap [Options] [Target IP/Subnet]     https://nmap.org/book/man-port-scanning-techniques.html
      -sS,(SYN scan) only sends one TCP packet with SYN flag, checks for open ports does not send ACK
      -sT, (Full Conn scan) establish 3-way tcp, banner grabbing
      -sN (Null scan) no flags set, seq # = 0.Open/filtered ports have no response, closed ports send RST
      -sF (Fin scan) FIN flag only, (like Null scan but stealthier)
      -sX (xmas tree) like above, different flags
      -sU (UDP scan) used to find .nix hosts that are blocking TCP and ICMP, get thru stateful firewals, not usefull for service discovery
      -sI (Idle scan) SYN/ACK half-open scan. more complez stealth techniq
      -sW (Windows scan) functions like ACK uses window size of repsonse to see if port open/closed/filtered. non zero = open, 0 = closed, no repsonse/icmp unreach = filtered
      -sR (RPC scan) looks for services using RPC (updated to -sV)
      -b (FTP bounce scan) uses intermediate ftp server to send files to 3rd prty to determine open ports, req anon login
      -O OS fingerp
      -sV (Version scan) 
      -T5/1 bad, T4
    sudo nmap -PO -sV <IP>
    namp 10.10.0.40/27 -v (scans for IPs and 1000 ports)
                          -Pn (no ping sweep)
                             -T5  (loud, sevefral scans)
                                -p 22-2,80 (-p- every port)
    nmap 10.10.0.40/27 -v -Pn -T5 -p 22-25,80
    nmap
    
    
    nc [Options] [Target IP] [Target Port]
      -l listens/opens a port
      nc <ip>< <port> reaches out to that port on that IP
      -z port scanning mode
      -v verbose
      nc -zv localhost 22
      nc -nvzw1
      
      netstat -ntlp ( listening ports)
      
Net Mapping:
  https://git.cybbh.space/net/public/raw/master/modules/networking/slides/images/offensivefinishednetwork.png
wget 10.50.21.41:21   -banner grab ftp server
  -R  ### recursivley grabs everything off server,

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
DATA TRANSFER, MOVEMENT, AND REDIRECTION:
    Common methods for transfering data:
      TFTP:
        RFC 1350 Rev2
        UDP transport
        Extremely small and very simple comms
        no terminal communications ()
        insecure (no auth or encryp)
        no directory services
        used often for tech such as BOOTP and PXE (remote image installs)
      FTP:
       RFC 959
        TCP transport
        Uses mult TCP conn
        Control Conn (21)/ Data Conn(20)
        Auth through clear-txt sign in (user/pass)
        inseucre in default config
        has directory services
        can be enhanced with SSL/TLS (FTPS)
        anon login
        Active
        Passive
      SFTP:
        TCP transp (22)
        uses symmetric/asymmetric encryp
        adds ftp like services to SSH
        auth through sign in or SSH key
        interactive terminal access
      FTPS:
        TCP transp (443)
        adds SSL/TLs encryp to FTP
        auth w/ user/pass and/or PKI
        interactive terminal access
        
      ***cd ../..:
        TCP transp (22)
        uses auth thru sign in/SSH key
        non interactive
        symm/asymm encryp
        Syntax ex:
          $ scp student@172.16.82.106:secretstuff.txt /home/student     ### download file from remote dir to local dir
          $ scp secretstuff.txt student@172.16.82.106:/home/student     ### upload file to remote dir from local dir
          $ scp -3 student@172.16.82.106:/home/student/secretstuff.txt student@172.16.82.112:/home/student    ### copy file from remote host to other remote host
        SCP Syntax w/ alternate SSHD:
          $ scp -P 1111 student@172.16.82.106:secretstuff.txt /home/student   ### download file from remote dir to local dir
          $ scp -P 1111 secretstuff.txt student@172.16.82.106:/home/student   ### upload file to remote dir from local dir
        SCP Syntax through a tunnel:
          ssh student@172.16.82.106 -L 1111:localhost:22 -NT      ###ssh tunnel
          $ scp -P 1111 student@localhost:secretstuff.txt /home/student   ### download file from a remote dir to local dir
          $ scp -P 1111 secretstuff.txt student@localhost:/home/student   ### upload file to a remote dir from local dir

      Class Ex:
      -r ##3 copies directories
        scp secret.txt  student@172.16.82.106:.   ##3 send secre.txt from my internet host to remote .106 to home directory of student with the same name ( indicated by '.')

  ***Traffic Redirection Tools:
    NETCAT:
      NETCAT: Client to listener file transfer
       Client (sends file): nc 10.2.0.2 9001 < file.txt
       Listener (receive file): nc -l -p 9001 > newfile.txt
      NETCAT: Listener to Client file transfer
       Listener (sends file): nc -l -p 9001 < file.txt
       Client (receive file): nc 10.2.0.2 9001 > newfile.txt

      ****Named pipe:
        mknod mypipe  ( mkfifio mypipe) ### makes named pipe
        
        blue host : nc -lp 3333 > mypile | nc -lp 4444 < mypipe
        blue priv : nc 192.168.1.1 3333 < test
        internet host : nc 172.16.82.106 4444 > secret.txt

      File trans with /dev/tcp: alt to netcat
        nc -l -p 1111 > file.txt
        cat file.txt > /dev/tcp/<IP>/<port>
      CTFD:
      Relay Machine:
###Accept connection
dmz:
nc -lp 1234 > mypipe | nc -lp 4444 < mypipe
nc -lp 4321 > mypipe | nc -lp 4444 < mypipe
internet host:
nc 172.16.40.10 4444 > 1steg.jpg
nc 172.16.40.10 4444 > 2steg.jpg
##Waiting for connections/make connection
dmz:
nc 172.16.82.115 6789 > mypipe | nc >internet host> 4444 < mypipe
nc 172.16.82.115 9876 > mypipe | nc <internet host> 4444 < mypipe
internet host:
nc -lp4444 > 4steg.jpg
nc -lp 4444 > 3steg.jpg
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
*****SSH (TUNNELING):
  SSH (OPEN SSH):
    various implem (v1/v2)
    provides auth, encryp, & integry
    allows remote terminal sessions
    used for tunneling
    created as a secure replacement for Berkeley Remote commands:
      rsh - replaced with ssh, provides a channel for running a shell on a remote pc
      rlogin - replaced with rlogin, provides remote login capability
      rcp - replaced with scp for secure file transfer
    sftp (not a unix r command replacement) -creates remote dir listing and file trans capab over ssh
    
   ******SSH port forwarding:
    creates channels using SSH-CONN proto
    allows for tunneling of other services thru SSH
    provides insecure serv encryp 
    local port forwarding:
     syntax: 
      ***ssh -p <optional alt port> <user>@<pivot ip> -L <local bind port>:<tgt ip>:<tgt port> -NT      -OR-
      ***ssh -L <local bind port>:<tgt ip>:<tgt port> -p <alt port> <user>@<pivot ip> -NT
      ***ex:
            Creates a local port (1111) on the local host that forwards to a target machine’s port 80.
            ssh student@172.16.82.106 -L 1111:localhost:80 -NT      -OR-    ###localhost is .106
            ssh -L 1111:localhost:80 student@172.16.82.106 -NT
      ***local port fwd thru local port:
          Internet Host:
          ssh student@172.16.1.15 -L 1111:172.16.40.10:22 -NT
          ssh student@localhost -p 1111 -L 2222:172.16.82.106:80 -NT    ### localhost is internet host; student here auth to .10
          firefox localhost:2222


 *****SSH dynamic port forwarding:
    syntax:
      ***ssh -D <port> -p <alt port> <user>@<pivot ip> -NT
    proxychains default port is 9050      ## use by typing 'proxychains' on internet host, tcp based, only accepts tcp proto
    creates a dynamic socks4 proxy that interacts alone, or w/ previously estab remote or local port fwd
    allows the use of scripts and other userspace programs thru tunnel 
    
     SSH Dynamic Port Forwarding 1-Step
      Blue Private Host-1:
      ssh student@172.16.82.106 -D 9050 -NT

      proxychains ./scan.sh
      proxychains ssh student@10.10.0.40
      
      
     SSH Dynamic Port Forwarding 2-Step
      Blue Private Host-1:
      ssh student@172.16.82.106 -L 1111:10.10.0.40:22 -NT
      ssh student@localhost -D 9050 -p 1111 -NT

      proxychains curl ftp://www.onlineftp.ch
      proxychains wget -r www.espn.com
      proxychains ./scan.sh
      proxychains ssh student@172.16.101.2
    
    
    *****SSH Remote port forwarding
      syntax:
        ssh -p <optional alt port> <user>@<remote ip> -R <remote bind port>:<tgt ip>:<tgt port> -NT     -OR-
        ssh -R <remote bind port>:<tgt ip>:<tgt port> -p <alt port> <user>@<remote ip> -NT
        -R, whoever i am SSH to gets the bind port
        ex:
          Blue Host-1
          ssh student@10.10.0.40 -R 1111:localhost:80 -NT  
            creates a remote port on remote localhost that fwds to tgt spec
        Remote and Local port fwd:
          Blue Private Host-1:
            ssh student@172.16.82.106 -R 1111:localhost:22 -NT
          Internet Host:
            ssh student@172.16.82.106 -L 2222:localhost:1111 -NT
          Internet Host:
            ssh localhost -p 2222
      Creates a remote port on a remote machine, staging a connection.
      Also creates a local port on the localhost to connect to the previously staged connection.
      Login to extra1 via the net1 local port forward
  
  
  
  
  
*****Class ex:
 ****FORWARD:
  ssh student@172.16.82.106 -L 1111:192.168.1.10:22 -NT   (blue host/ blue priv)
  ssh localhost -p 1111 (regular ssh connection)
  #ssh localhost -p 1111 -D 9050 (dynamic) to get scripts/etc on box
        proxychains nmap -Pn 127.0.0.1 (cant ping across proxy) (priv host)
        proxychains wget -r localhost   (http stuff)
        proxychains nc localhost 9001   (netcat to banner grab)

 *****Remote:
  ssh student@172.16.82.106 -L 1111:192.168.1.10:22 -NT   (tunnel)
  ssh localhost -p 1111 (connect to blue priv from internet host)             ^
  ssh 192.168.1.1 -R 6789:localhost:22 -NT (open 22 on blue host 1 from blue priv)
  ssh 172.16.82.106 -L 9999:localhost:6789 -NT   (connect to from internet host)
  ssh localhost -p 9999   (final connection from interhet host)
            ssh localhost -p 2222
----------------------------------------------------------------------------------------------------------------------------------------------------------------
Recon Methodology:
  Recon Meth:
1. Host Discov (nmap, nc, ./scan.sh, ping sweep)
nmap -Pn -T4 <ip>,1,30,55,70/cidr -p 21-23,80 | egrep -i "scan report|open"
nc <ip> 21-23 80
Ping Sweep:
for i in {1..254} ;do (ping -c 1 192.168.1.$i | grep "bytes from" &) ;done
replace first three octets
2. Port Discov (nmap, nc, ./scan.sh)  
3. Port Validate (Banner Grab, nc)
4. Follow-on Actions based on ports found
  4a. if 22 or 23, connect to it and do PASSIVE RECON
  4b. if 21 or 80, (80)wget -r <ip> ;; (21)wget -r ftp://<ip> (PULL THE FILES)

Scanning Meth:
1. Quick Scan ports: 21-23, 80
2. Scan specific ports based on hints/clues
3. 1-10000
4. All ports (65535)

Passive Recon Meth:
hostname
ip addr, ifconfig (interf and subnets)
arp -a, ip neigh | egrep -iv "failed" (neighbors?)
ss  -ntlp (other listening ports/ filtered?)
ls /usr/cctc/share (Files of interest)
which tcpdump wireshark wget curl (Available Tools)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
NETWORK ANALYSIS:
  FingerPrinting & Host Ident:
    variances in RFC for differ OS's and systems enables the capability for fp
    tools used for fp and host identif can be used psavviely(sniffing/fp) or actively(accning)
  P0F(passive OS fingerp):
    looks at variations in inital TTL, frag flag, default IP header packet length, window size, TCP options
      config in : /etc/p0f/p0f.fp       sudo p0f -i eth0
  Network Traffic Sniffing:
    Libpcap
    WinPcap (outdated)
    NPCAP
    ***TCPDUMP/WIRESHARK            sudo tcpdump -r <pcap> "tcp[13] = 0x12" -n | awk '{print $3}' | sort -n | uniq
   
   Baselines/Obj:                                                                                | cut -d. -f5 | sort uniq 
      verify port/proto
      normal vs peak net traffic
      7 day time frame
      current state/ultil of net
      stats:
        proto hier
        conv
        endpoint
        I/O graph
        ipv4
        ipv6
        stat
        expert inform
        
   Net Data Types:
    full packet capture data
    session data
      sflow
      netflow
    stat data
    packet string data
    alert data
    log data
    data collect devices:
      sensors
        in-line   ; controls traffic
        passive  ; just observing
      methods
        TAP     ; in-line/passive
        SPAN    ; copy traff from vlan
        ARP Spoofing (MitM)   ; redir traffic to other, copy then fwd
        
    Anomaly Det:
      Indicator of attack (IOA)
        proactive
        a series of actions that are sus together
        focus on intent
        look for what must happen
          code execution. persis, lat move, etc.
      Indicator of Compromise (IOC)
        reactive
        forensic evidence
        provides info that cna change
          malware, IP addr, exploits, signatures
      Indicators:
        .exe/executables
        NOP sled
        Repeated letters
        well-known sign
        mismatched proto
        unusual traffic
        large amount of traffic/unusual times
        
      Potential indicators of attack:
          dest
          ports
          public servers/DMZs
          off-hours
          net scans
          alarm events
          malware reinfec
          remote logins
          unusual traffic outb
          anomalous user login or acct use
          size of respon for HTML
          high # of req for the same files
          using non-stnd port/applic-port mismatch
          writing changes to the registry/system files
          DNS req
          
      MALWARE:
        Adware/spyware
          large amts of traffic/unusual traff
          IOA
            dest
          IOC
            unusual traff outb
          Virus
            phishing/ watering hole
            IOA
              alarm events, email proto
            IOC
              changes to the regis/ sys file
          Worm
            same as Virus
          Trojans
            beaconing
            IOA
              dest
            IOC
              unsual traff outbound, unusual tasks, changes to registry/sys files
          Rootkit - kernel level/ registry levels
          Backdoor - remote logins
          Botnets - controls PCs, remote logins
          Polymorphic and Metamorphic Malware - (poly)changing code ; (meta) change depends on circumstance (ie what OS, vm, )
          Ransomware - PC locks for ransom
          Mobile Code - on sub stick
          Info-Stealing Worms -  
          BIOS/firmware Malware - 
          
        USE display filters, follow streams, BPFs, color coding
        hex outputs
        Decoding
          enca, chardet, iconv
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Network Traffic Filtering:
  Intrusion Detection & Prevention Systems
  *Snort*, OSSEC, Suricata, Security Onion
    Placement
      in line
      or not
    Recognition Methods
      signature
      heuristic aka behavioral
      
      ******************
    SNORT REQ .conf FILE.  
    (sudo) snort -D -l /var/log/snort -c /etc/snort/snort.conf
          ^daemon   ^ creates log file    ^points to .conf file, must need it
      makes two file when hits alerts, etc,the snort.log.### is the epoch timestamp (its a pcap), open with wireshark or tcpdump -XXvvr <pcap>
      'action' file shows logs hit on given firewalls
      
    (sudo) snort -r   <snort.log.pcap> -c /etc/snort/snort.conf      ### gives live info, doesnt run as a daemon
      
      sudo snort -D -i eth0 -l /var/log/snort/ -c /etc/snort/snort.conf
      ****
    Snort IDS/IPS rule - header
[action] [protocol] [s.ip] [s.port] [direction] [d.ip] [d.port] ( match conditions ;)
    Action - such as alert, log, pass, drop, reject
    Protocol - includes TCP, UDP, ICMP and others
    Source IP address - single address, CIDR notation, range, or any
    Source Port - one, multiple, any, or range of ports
    Direction - either inbound or in and outbound
    Destination IP address - options mirror Source IP
    Destination port - options mirror Source port
    
       Snort IDS/IPS General rule options:
    msg - specifies the human-readable alert message
    reference - links to external source of the rule
    sid - used to uniquely identify Snort rules
    rev - uniquely identify revisions of Snort rules
    Classtype - used to describe what a successful attack would do
    priority - level of concern (1 - really bad, 2 - badish, 3 - informational)
    metadata - allows a rule writer to embed additional information about the rule   

Snort IDS/IPS Payload detection options:
    content - looks for a string of text.
    |binary data| - to look for a string of binary HEX
    nocase - modified content, makes it case insensitive
    depth - specify how many bytes into a packet Snort should search for the specified pattern
    distance - how far into a packet Snort should ignore before starting to search for the specified pattern relative to the end of the previous pattern match
    within - modifier that makes sure that at most N bytes are between pattern matches using the content keyword
    offset - skips a certain number of bytes before searching (i.e. offset: 12)

Snort IDS/IPS Non-Payload detection options:
    Flow - direction (to/from client and server) and state of connection (established, stateless, stream/no stream)
    ttl - The ttl keyword is used to check the IP time-to-live value.
    tos - The tos keyword is used to check the IP TOS field for a specific value.
    ipopts - The ipopts keyword is used to check if a specific IP option is present
    seq - check for a specific TCP sequence numberRule Header

    ICMP ping sweep

    alert icmp any any -> 10.1.0.2 any (msg: "NMAP ping sweep Scan"; dsize:0; sid:10000004; rev: 1; )

    Look for a specific set of Hex bits (NoOP sled)

    alert tcp any any -> any any (msg:"NoOp sled"; content: "|9090 9090 9090|"; sid:9090; rev: 1; )

    Incorrect telnet login attempt

    alert tcp any 23 -> any any (msg:"TELNET login incorrect"; content:"Login incorrect";
    flow:established,from_server; classtype:bad-unknown; sid:2323; rev:6; )
    ack - check for a specific TCP acknowledge number.
    flags - The flags keyword is used to check if specific TCP flag bits are present.
    itype - The itype keyword is used to check for a specific ICMP type value.
    icode - The icode keyword is used to check for a specific ICMP code value.

Snort IDS/IPS Post detection options:
    logto - The logto keyword tells Snort to log all packets that trigger this rule to a special output log file.
    session - The session keyword is built to extract user data from TCP Sessions.
    react - This keyword implements an ability for users to react to traffic that matches a Snort rule by closing connection and sending a notice.
    tag - The tag keyword allow rules to log more than just the single packet that triggered the rule.
    activates - This keyword allows the rule writer to specify a rule to add when a specific network event occurs.
    activated_by - This keyword allows the rule writer to dynamically enable a rule when a specific activate rule is triggered.
    count - Allows the rule writer to specify how many packets to leave the rule enabled for after it is activated.

Snort IDS/IPS Thresholding and suppression options:
    type [limit | threshold | both]
        limit alerts on the 1st event during defined period then ignores the rest.
        Threshold alerts every [x] times during defined period.
        Both alerts once per time internal after seeing [x] amount of occurrences of event. It then ignores all other events during period.
    track [by_src | by_dst] - rate is tracked either by source IP address, or destination IP address
    count [#] - number of rule matching in [s] seconds that will cause event_filter limit to be exceeded
    seconds [seconds] - time period over which count is accrued. [s] must be nonzero value

***********
Snort rule examples!!!

Look for anonymous ftp traffic:
  alert tcp any any -> any 21 (msg:"Anonymous FTP Login"; content: "anonymous"; sid:2121; )

This will cause the pattern matcher to start looking at byte 6 in the payload)
  alert tcp any any -> any 21 (msg:"Anonymous FTP Login"; content: "anonymous"; offset:5; sid:2121; )

This will search the first 14 bytes of the packet looking for the word “anonymous”.
  alert tcp any any -> any 21 (msg:"Anonymous FTP Login"; content: "anonymous"; depth:14; sid:2121; )

Deactivates the case sensistivity of a text search
  alert tcp any any -> any 21 (msg:"Anonymous FTP Login"; content; "anonymous"; nocase; sid:2121; )



*****
Rule Header
    ICMP ping sweep
     alert icmp any any -> 10.1.0.2 any (msg: "NMAP ping sweep Scan"; dsize:0; sid:10000004; rev: 1; )
    Look for a specific set of Hex bits (NoOP sled)
      alert tcp any any -> any any (msg:"NoOp sled"; content: "|9090 9090 9090|"; sid:9090; rev: 1; )
    Incorrect telnet login attempt
     alert tcp any 23 -> any any (msg:"TELNET login incorrect"; content:"Login incorrect";
    flow:established,from_server; classtype:bad-unknown; sid:2323; rev:6; )


    Failed IDS/IPS
      fail open/close
        fail open can restart the computer by sending malicious packet
      insersion attack
        IDS accepts attack
        host will not accept it
      evasion attacking
        IDS does not accept packet
        host will accept it
      
      strengthening def sys
        linking IDS/IPS to other tools
        multiconfig
        tuning ( get rid of false positives)
        HIDS and File Integrity
        
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
NETWORK TRAFFIC FILTERING:
  Practical:
    MAC, IP, Website, Network, Email filtering
    Security, To block malicious traffic, ensure data gets to tinded recipients, obfuscate network internals, decrease workload, efficiency
  Filtering Devices:
  https://git.cybbh.space/net/public/raw/master/modules/networking/slides/images/T1_Filtering_Devices_Mechanisms&Layer.jpg
    Switches, PACL & VACL ACL, Layer 2/3
    Routers, ACL , Layer 3/4
    Proxies, URL/DNS backlists, MIME filter, Contnet keywork filt, Layers 3-7
    IDS, Signatures, Layer 3-7. IPS inline
    Host Based Firewall, Rules, Layers 3-7
    Network Firewall, Rules/Packet Filt(stateless) 3/4 /Stateful 3/4 /App Layer FW 3-7 / Nxt Gen Fw 3-7
    
  Filtering Concepts:
    Whitelist vs Blacklist, trusted/sus
    Default policies and Implicit and Explicit rules
    Network Device Op Modes
      Routed
      Transparent
    Intrusion Defense
      Intrusion Detection Sys
      Intrusion Prevention Sys
    Filtering Device Placement
    Firewall filtering Methods
      Stateless (Packet) Filtering (L3+4)
      Stateful Inspection (L4)
      Application Layer (L7)
      
   TRAFFFIC DIRECTIONS!
    -traffice originating from the localhost to the remote-host
    -return traffic from that remote-host back to the localhost
    -traffic orig from the remote-host to the localhost
    -return traffic from the localhost back to the remote-host
   ----------------------------------------------------------------------------------------   
   Host Based Filtering:
    Windows, Windows Defender
    Linux, iptables
    https://git.cybbh.space/net/public/raw/master/modules/networking/slides/images/T51_iptables_options.png
    
      Netfilter Framwork:
        packet filt
        stateless/stateful firewalls
        network addr and port trans (NAT PAT)
        other packet manipul
        NetFilter Hooks:
              NF_IP_PRE_ROUTING → PREROUTING
              NF_IP_LOCAL_IN → INPUT
              NF_IP_FORWARD → FORWARD
              NF_IP_LOCAL_OUT → OUTPUT
              NF_IP_POST_ROUTING → POSTROUTING
      
      **************888Config Iptables:
        ***iptables - IPV4 packet admin
        ip6tables - IPV6 packet admin
        ebtables - Ethernet Brdige frame table admin
        arptables - arp packet admin
      
       filter table -default table
        CHAINS: input, forard, output
       nat - used to translate private <> public addr and ports
        prerouting, postrout, output
     
***IPTABLES SYNTAX!!!     
sudo iptables -t [table] -A [chain] [rules] -j [action]
Rules:
-i or -o [iface]
-s or -d [ip.add | network/mask]
-p [protocol(in ipv4 header)]
-m is used with:
  state --state [state]
  mac [--mac-source | --mac-destination] [mac]
  tcp | udp [--dport | --sport] [port | port1:port2]
  multiport [--sports | --dports | --ports]
                [port1,[port2,[port3:port15]]]
  bpf --bytecode [ 'bytecode' ]
[action] - ACCEPT, REJECT, DROP
        
 Modify Iptables:
  flush table : iptables -t [table] -F
  change default policy: iptables -t [table] -P [chain] [action]
  Lists rules with rule numbers: iptables -t [table] -L --line-numbers
  Lists rules as commands interpreted by the system: iptables -t [table] -S
  Inserts rule before Rule number: iptables -t [table] -I [chain] [rule num] [rules] -j [action]
  Deletes rule at number: iptables -t [table] -D [chain] [rule num]     
        
        
      *******************CONFIG NFTABLES!:  
       Families:
        ip - IPv4 packets
        ip6 - IPv6 packets
        inet - IPv4 and IPv6 packets
        arp - layer 2
        bridge - processing traffic/packets traversing bridges.
        netdev - allows for user classification of packets - nftables passes up to the networking stack
        (no counterpart in iptables)
       Three Chain Types:
        filter - to filt packet - can be used with arp, bridge, ip, ip6, and inet famili
        route - to reroute packets - can be used with ip and ipv6 fam only
        nat - used for NAT - used with ip and ip6 table fam only
      Hooks:
        PREROUTING
        POSTROUTING
        INPUT
        OUTPUT
        FORWARD
        INGRESS - used with NETDEV family only
        
      FAMILY CHAIN HOOK:
        Filter: ip, ip6, inet, arp, bridge
        Route: ip, ip6
        nat: ip, ip6


      ***Create table:
        sudo nft add table [family] [table]
        [family] = ip, ip6, inet, arp, bridge and netdev.
        [table] = user provided name for the table 
        
       create base chain:
        nft add chain [family] [table] [chain] { type [type] hook [hook]
        priority [priority] \; policy [policy] \;}

        [chain] = User defined name for the chain.

        [type] =  can be filter, route or nat.

        [hook] = prerouting, ingress, input, forward, output or
         postrouting.

        [priority] = user provided integer. Lower number = higher
             priority. default = 0. Use "--" before
             negative numbers.

        ; [policy] ; = set policy for the chain. Can be
              accept (default) or drop.

        Use "\" to escape the ";" in bash

      create rule in chain:
      nft add rule [family] [table] [chain] [matches (matches)] [statement]
      [matches] = typically protocol headers(i.e. ip, ip6, tcp,
            udp, icmp, ether, etc)
      (matches) = these are specific to the [matches] field.
      [statement] = action performed when packet is matched. Some
              examples are: log, accept, drop, reject,
              counter, nat (dnat, snat, masquerade)
              
      Mod tables:
        nft {list | flush} ruleset
        nft {delete | list | flush } table [family] [table]
        nft {delete | list | flush } chain [family] [table] [chain]
        
        nft list table [family] [table] [-a]
        Adds after position
          nft add rule [family] [table] [chain] [position <position>] [matches (matches)] [statement]
        Inserts before position
          nft insert rule [family] [table] [chain] [position <position>] [matches (matches)] [statement]
        Replaces rule at handle
          nft replace rule [family] [table] [chain] [handle <handle>] [matches (matches)] [statement]
        Deletes rule at handle
          nft delete rule [family] [table] [chain] [handle <handle>]


  *****CLASS DEMOS*****:
  ***IPTABLES
  -I insert to top
  -A append to bottom
    look atdefault filter iptables: sudo iptables -L
    look at NAT tables: sudo iptables -t nat
    erase default iptables : sudo iptables -F
               ^^  NAT:   sudo iptables -t nat
    makes filter rule to allow port ssh: sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT
                                                          OUTPUT       --sport
    drops all: sudo iptables -P INPUT DROP #dont do this
    
    allows multible ports and matches for states of connections: 
        sudo iptables -A INPUT -p tcp -m multiport --ports 22,23,6010,6011,6012 -m state --state NEW,ESTABLISHED -j ACCEPT
                         OUTPUT

    sudo iptables -L --line     ---shows line numbers, usefull for appending and deleting
    sudo iptables -D OUTPUT #   ---deletes via chain and line number
    
    sudo iptables -P FORWARD DROP   ---changes policy of forward to DROP,etc.
    

    drop traffic comming from ip: sudo iptables -I INPUT -s 172.16.82.106 -j DROP
    drop traffic going to ip: sudo iptables -I OUTPUT -d 172.16.82.106 -j DROP


  sudo iptables -A INPUT -s 172.16.82.112 -j ACCEPT
  sudo iptables -A OUTPUT -d 172.16.82.112 -j ACCEPT

  sudo iptables -L -v       ### -v is connection tracking

  for CHAIN in INPUT OUTPUT FORWARD;do sudo iptables -P $CHAIN ACCEPT;done    ###changes all chains to accept

extra:
  sudo iptables -A INPUT -m state --state INVALID -j DROP   ###Drops invalid fragments (not belonging to any connections)
  sudo iptables -A INPUT -f -j DROP     ### drops all fragments
  sudo iptables -A INPUT -i eth0 -p tcp --syn -m limit --limit 10/second -j ACCEPT     ###Throttle SYN requests
  
Save rules to file:
  sudo iptables-save > file
  sudo iptables-restore < file




  ***NFTABLES:
     sudo nft add table ip CCTC   ###create ipv4 table
     sudo nft list tables        ###show tables
     sudo nft flush table ip CCTC
              delete
     
     sudo nft add chain ip CCTC input { type filter hook input priority 0 \; policy accept \; }     ### makes chain to new table
                                ^name 
                                output                   output
                                
    sudo nft list ruleset        ###list all rules made
    sudo nft insert rule ip CCTC input tcp dport 22 accept      ###make
                                 output    /sport


    sudo nft list chain ip CCTC output -ann     ###shows a specific chain in a specific table, shows handle for easy deletion
                  ruleset -ann


    sudo nft add rule ip CCTC input tcp sport {22, 6010, 6011, 6012} accept
                              output    dport

    
    block ips:
sudo nft add rule ip CCTC input ip saddr 172.16.82.122 drop
sudo nft add rule ip CCTC output ip daddr 172.16.82.122 drop
sudo nft add rule ip CCTC input ip saddr 10.10.0.40 accept
sudo nft add rule ip CCTC output ip daddr 10.10.0.40 accept

sudo nft add rule ip CCTC input position 6 ip saddr 172.16.82.112 drop      ### adds rule below handle 6
sudo nft insert rule ip CCTC output ip daddr 172.16.82.112 drop       ### to the top of list

sudo nft delete rule ip CCTC output handle 22     ###delete via handle
                             input/etc

extra:
  sudo nft add rule ip NAME input ct state invalid drop     ###drop INVALID packets
  sudo nft add rule ip NAME input ip frag-off != 0 drop     ###Drop fragmented packets
  sudo nft add rule ip NAME input tcp flags syn limit rate 10/second accept   ###Limit (throttle) SYN request to prevents SYN floods


  sudo nft list ruleset > nft.conf      ### saves file
  sudo nft -f nft.conf


























