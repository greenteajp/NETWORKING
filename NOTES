DAY1:

Total Networking
https://miro.com/app/board/o9J_klSqCSY=/

Activity CTFd:
http://10.50.20.75:8000/login     JODO-006-M
Practice CTDFd:
http://10.50.22.14:8000/            SAME^

ssh student@10.50.21.119 -X   (password)

curl cht.sh/nc

.vimrc
  1 syntax enable
  2 set tabstop=4
  3 set shiftwidth=4
  4 set expandtab
  5 set number
  6 filetype indent on
  7 set autoindent                                                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
NETWORK FUNDAMENTALS:
https://net.cybbh.io/-/public/-/jobs/699293/artifacts/modules/networking/slides/1-Network_Fundamentals.html
https://learningnetwork.cisco.com/s/question/0D53i00000KswgJCAR/magic-number-subnetting-introduction    ### vlsm cheat sheet

4 = nibble
8 = bytes
16 = half word
32 = word
64 = very long word

Standards:
https://www.ietf.org/standards/
IANA, assigns DNS, IPs, internet protocols


Physical Layer (OSI 1):
  -Hardware Specifications
  -Encoding and Signaling
  -Data Transmission and Reception
  -Physical Network Design
  
  
Data Link Layer (OSI 2):
  -MAC
  -LLC(Logical Link Control)
  -Ethernet Header
    -0x0800 ipv4
    -0806 ARP
    -86DD ipv6
    -8100 vlan tag
  -Arp Header
    -mac address resolution
    -man in the middle attack
  -802.1Q Header
    -VLAN
 SCAPY TOOL:
  -sudo scapy, manipulate frame/network data
    a=Ether()   ###basic ethernet header
    a.show()
    a.type=any header type
    
    b.Dot1Q()   ### specifically for VLANS
    b.show()
    b.vlan=#    ### name
    
    c=IP()      ### IP packet
    
    d=ICMP()      ### icmp packet
      
    sendp(a/b/c/d, iface="eth0")     ### sends packet
      
 Switching Tech:
 -fast forward, only dst MAC
 -frag free
    -IEEE 802.1AD "Q-in-Q"
    -double tagging
        0x88A8 - stnd double tag
        0x9100 - non-stnd double tag
 -STP
    ties multi dev together
    elect root bridge
      multi routes, can get into a loop if no root bridge
    disables alt routes
    determines routes via: 
        CDP (Cisco)
        FDP (Foundry)
        LLDP (Link Layer)
 -DTP
 -VTP 
      
      
Network Layer (OSI 3):
  -IPv4/6 Headers
  -Fingerprinting with TTLs/TCP window size
    Linux 64 TTL; 5840 TCP window size
    Google's custom Linux 64; 5720
    FreeBSD 64; 65535
    Windows XP 128; 65535
    Win7, Vista, Server 2k8 128; 8192
    Cisco (IOS 12.4) 255; 4128
  -netstat -ntlp, only listening ports
  -ICMPv4/6 Headers; adminsistrative protocol, mgmt, troubleshoooting (i.e ttl exceeded need more frags). 
    Error Reporting, flow control, first-hop gateway direction. Echo request/reply ( ping,traceroute)
  -Fragmentation, 1500byte segments. "MF" flag of 1 is more fragments, minus the last packet.
    Offset number orders the frags
    MTU 1500:
    1500-(5 x 4) = 1480
    1480/8= 185 offset
    Offset=0,185,370,555,740.
  -Zero Configuration
    IPv4; APIPA, RFC 3927 (192.168.0.0/16)
    IPv6; SLAAC, RFC4862  
      
Routing Tech:
  Default route - 0.0.0.0/0
  Lookup process via longest match
    i.e- ipdst = 172.16.0.10 -> 172.16.0.0/26 = 10101100.00010000.00000000.00,000000
  Admin Distance
    connected 0
    Static 1
    EIGRP sum route 5
    Ext BGP 20
    Int EIGRP 90
    IGRP 100
    OSPF 110
    IS-IS 115
    RIP 120
    Ext EIGRP 170
    Int BGP 200
 Static route priority over dynamic     
      
      
Transport Layer (OSI 4):
  -0-1024, well known ports
  -TCP
    TCP Flags in order: CWR, ECE,URG, ACK, PSH, RSt, SYN, FIN
    3-way handshake (SYN, SYN+ACK, ACK)
    PSH+ACK, needs more (Data transfer)
    FIN+ACK, ACK, FIN+ACK, ACK ends (4-way termination)
  -UDP
    No handshake, just sends data and forgets
    
    
Session Layer (OSI 5):
  -Protocols: 
  Socks 4/5 (TCP 1080)
    connections through proxy
    various client server exchange msgs
    client provide auth to server
    client req conn to server
  PPTP (TCP 1723)
    Obsolete method for VPn tunnels, known vulnerab
  L2TP (TCP 1701)
    Does not provide encryption itself, relie son other encryp
  SMB/CIFs(TCP139/445 and UDP 137/138)
    SMB rides over NetBIOS
      NetB Dgram -UDP 138
      NetB Session -TCP 139
      SAMBA/CIFs, versions of SMB
  RPC (ANY PORT)
    Basic request/response protocol
    JSON,XML,NFS,SOAP uses this
    
    
Presentation Layer (OSI 6):
  Translation, Formating(mp3,wav,jpeg,etc), Ecndoing(SCII,EBCDIC,HEX,BASE64)
  Encryption(Symmetric/Asymmetric) 


Application Layer (OSI 7):
 -FTP (TCP 20 Data/21 Control)
    Active/Passive
    Note reliable or secure
    Anonymous access
    Active
      Server/Client(high port and + 1) req
      NAT & firewall issues
      Complications with tunneling through SSH
      Passive solves issues w/ Active, better used in modern sys
 -SSH (TCP 22)
  Messaging provides
      Clien/server auth
      Asymm or PKI key exchange
      Symm for session
      User auth
      Data stream channeling
  Archit 1:
    Server
    Client
    Session
    Keys
      User Key -Asymm public key, user to server
      Host Key -Asymm public key, server to user
      Session Key -Symm key created by client and server to protect sess comms
      Key Gen
  Archit 2:
    Known-Host database - collection of host keys, used by client/server for mutual auth
    Agent-Store keys as a convenience for users
    Signer-signs the host-based auth packets
    Random Seed-used for entropy in creating pseudo-rand #s
    Config File-settings tht exist on client/server to dictate config of ssh/sshd
  SSH Concerns:
    Using passwd auth only
    Key rotation
    Key mgmt
    Implementation specification
 -Telnet (TCP 23):
 -SMTP (TCP 25):
 -TACACS (TCP 49)  Simple/Ext:
  Controls logins
 -HTTP(S) (TCP 80/443):
  Methods:
    GET/HEAD/POST/PUT
  HTTP status Codes:
    100,200,300,400
 -POP(TCP 110):
 -IMAP(TCP 143):
 -RDP (TCP 3389):
    Compression or Encryption support
    Desktop size and color depth
    Keyboard Mapping
    Remote system control
    Mouse-cursor color prop
 -DNS (Query/Response) (TCP/UDP 53):
    A,AAAA,CNAME,PTR,NS,MX,SOA,TXT
 -DHCP (UDP 67/68):
    Auto assign IPs
 -TFTP (UDP 69):
 -NTP (UDP 123):
 -SNMP (UDP 161 agent/162 manager):
    MGMT
    Set/Get req
    Get next/bulk
    response
    trap
    inform
 -RADIUS (UDP 1645/1646 AND 1812/183)
 -RTP (1024+):
    delivers audio.video
    streaming
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Capture Library: 
  Libcap,WindPcap,NPCAP
  USER SIDE- WIRESHARK,TCPDUMP,BPFS
    
TCPDUMP:
    sudo tcpdump -D; shows interfaces on box
                 -i "iface name"
                 -X, shows hex dump
                 -XX, also shows ethernet header
                 -vv(v), very verbose
                 -w "name.pcap" to save output
                 -no options for just port and ips
                 -port #, specifies only for that port
              Operators:
                 - |, &&, !, <, >, <=, ==, !=, ...
              -'portrange 20-100'   
ex:
  sudo tcpdumnp -i eth0 -XXvv -w dump.pcap
  sudo tcpdump port 80 or 22; (80 | 22)
  sudo tcpdump "(src net 10.1.0.0/24 && (dst net 10.1.0.0/24) && (! dst host 10.1.0.3)"
  
BERKELEY PACKET FILTERS (BPF):
  req a SOCK_RAW socket and setsockopt calls SO_ATTACH_FILTER
tcpdump {A} [B:C] {D} {E} {F} {G}
  A = Protocol (ether | arp | ip | ip6 | icmp | tcp | udp)
  B = Header Byte offset
  C = optional: Byte Length. Can be 1, 2 or 4 (default 1)
  D = optional: Bitwise mask (&)
  E = Operator (= | == | > | < | <= | >= | != | () | << | >>)
  F = Result of Expresion
  G = optional: Logical Operator (&& ||) to bridge expressions
  Ex1:
    tcpdump 'ether[12:2] = 0x0800 && (tcp[2:2] != 22 && tcp[2:2] != 23)'
                ^byte 12 then next two
  
  Atleast one of the designated bits must be set to equal 0, like or statement
    tcp[13] & 0x11 !=0
  Have to match, others can be set
    tcp[13] & 0x11 = 0x11
  HAVE to match, will not look for others
    tcp[13] = 0x11
    --or--
    tcp[13] & 0xFF = 0x11
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
PACKET CREATION AND SOCKET PROGRAMMING:

Socket Types:
 -User Space Sockets:
    most common sockets that do not req elevated priv to perform actions on behalf of user apps.  
    using tcpdump, or wireshark to read a file
    using nmap w/ no switches
    using netcat to conn to a listener
    using netcat to create a listener w/ 1024+
    using /dev/tcp or /dev/udp to transmit data
   Stream Sockets:
    conn oriented and sequenced; methods for conn est. and tear-down. Used with TCP,SCTP,Bluetooth
   Datagram Sockets:
    connless; designed for quickly sending and rec. data. Used with UDP
    
    
 -Kernel Space Sockets:
    attempts to access hardware directly on behalf of a user app to either prevent encap/decap or to create packets from scratch, req elev priv
    using wireshark/tcpdump to capture packets
    using nmap for OS ident or set specific flags when scanning
    using netcat to create a list in 0-1023 ports
    using Scapy to craft/modify a packet for transm
    using Python to craft/mod Raw Sockets for transm
    Network devices sung routing protocols, i.e OSPF
   Raw Sockets:
    direct sending and rec. of IP packets w/out auto proto-specific formatting
    all headers typically included in packet and not removed
    used in nmap, tcpdump, wireshark
      
      
Python:
  Python Libs:
   Libs - contains own modules
    Modules - file consisting of python code: struct, socket, sys
      functions - block of organiz code: struct.pack, socket.socket, "user-defined"
      exceptions - attempting to execute w/out proper perm, ctrl + c, attempt access file not existing
      constants - value not change in a spec time: AF_INET/6, SOCK_STREAM, etc.
      objects - socket.bind(addr), socket.connect(addr), socket.send(bytes[,flags]), socket.close()
      types -Arrays: List, Tuple, Set, Dict; Data Types: int, float, complex, str, 
      
  Network sockets primarily use the Python3 Socket library and socket.socket function.
  import socket
  s = socket.socket(socket.FAMILY, socket.TYPE, socket.PROTOCOL)
  inside socket.socket.functions you have these arguments in order:
    socket.socket([*family*[,*type*[*proto*]]])
    family constants should be: AF_INET (default), AF_INET6, AF_UNIX
    type constants should be: SOCK_STREAM (default), SOCK_DGRAM, SOCK_RAW
    proto constants should be: 0 (default), IPPROTO_RAW
send() - TCP
sendto() - UDP

echo "I got your message" | nc -lp 54321
run stream.py


Raw IPv4 Sockets:
  raw socket scripts must include IP header and next headers
  use for testing specific def mech-such as triggering IDSs, filtering
  avoiding def mech
  obfusc data on transfer
  manually craft packet w/ chosen data in header fields, not automatic
Encoding and Decoding:
  encoding:
    process of taking bits and conver using specif cipher
  decoding:
    reverse of conver process used by specif cipher for encode
  common encodes:
    UTF-8,BASE64,Hex

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Network Reconnasissance:
https://net.cybbh.io/-/public/-/jobs/699293/artifacts/modules/networking/slides/3-Network_Reconnaissance.html
Types:
  https://git.cybbh.space/net/public/raw/master/modules/networking/slides/images/Recon2.png
  
 ACTIVE
  Internal:
    DNS Queries
    ARP requests
  External:
    Network Scanning
    
 PASSIVE
  Interal:
    Packet Sniffer
  External:
    DNs lookups
    Whois
    Job Site Listings
  Gethering info about tgts w/out direct interaction
  not as straight forward, req more time than active recon
  lower risk
  involves identifying:
    IP addr and sub-domains
    external and 3rd prty sites
    people and tech
    content of interest
    vuln
  Possible tools:
    WHOIS queries
    Job site listings
    phone numbers
    google searches
    passive OS fingerp
  External network recon: 
    info gathered outeside of net using passive methods
    allows for more efficient attacks and plans
    DNS:
      Resolves hostnames to IP addr
      RFC 3912
      WHOIS queries
    Dig:
      Typically btw primary and second DNs servers
      If allowed to transfer externally hostnames, IPs, and IP blocks can be determined
      dig axfr "dns transfer"
    Zone Tranfers:
      return dns info
      supplements base queries
    Host history:
      netcraft
      wayback machine (webiste for internet archives)
    Google searches:
      subdomains
      tech
      *ccboe.net -site:*ccboe.net
      Explouit database for "google hacking database"
    Shodan:
      reveals info abt tech, remote access services, improperly config services, and net infrast
      when selected can give additional info and applicable vuln
      exploits defaults, AOTs
      
 Internal
 External

Network Scanning:
  Scanning Strat:
     remote to local
     local to remote
     local to local
     remote to remote
  Scanning Approach:
    Aim
      wide range tgt scan   # just to find stuff
      tgt specific scan
    Method
      single source scan
      distributed scan  # mult scans/mult pc
  SCANS:
       broadcast ping/ping sweep, sends to everything, easiest, not always reliable, secured often for only internal pings (CLI ninja ping sweep, rubyguides)
       arp scan, dont are about ping/dns/etc, only a physicall connected device will have a arp cache; 
       syn scan (only syn probe); full connect scan (if tcp connection can be established); null scan (tcp conn with no flags); fin scan (no convo); (TCP scans)
       xmas scan(syn/fin/ack or every flag checked) 
       udp scan (usually non responding, need something i.e a nc); idle scan; ack/windows scan
       rpc scan; ftp scan; decoy scan; OS fingerp scan; version scan; protocol ping; discovery probes; SCTP init scan
  ex:
    nmap [Options] [Target IP/Subnet]     https://nmap.org/book/man-port-scanning-techniques.html
      -sS,(SYN scan) only sends one TCP packet with SYN flag, checks for open ports does not send ACK
      -sT, (Full Conn scan) establish 3-way tcp, banner grabbing
      -sN (Null scan) no flags set, seq # = 0.Open/filtered ports have no response, closed ports send RST
      -sF (Fin scan) FIN flag only, (like Null scan but stealthier)
      -sX (xmas tree) like above, different flags
      -sU (UDP scan) used to find .nix hosts that are blocking TCP and ICMP, get thru stateful firewals, not usefull for service discovery
      -sI (Idle scan) SYN/ACK half-open scan. more complez stealth techniq
      -sW (Windows scan) functions like ACK uses window size of repsonse to see if port open/closed/filtered. non zero = open, 0 = closed, no repsonse/icmp unreach = filtered
      -sR (RPC scan) looks for services using RPC (updated to -sV)
      -b (FTP bounce scan) uses intermediate ftp server to send files to 3rd prty to determine open ports, req anon login
      -O OS fingerp
      -sV (Version scan) 
      -T5/1 bad, T4
    sudo nmap -PO -sV <IP>
    namp 10.10.0.40/27 -v (scans for IPs and 1000 ports)
                          -Pn (no ping sweep)
                             -T5  (loud, sevefral scans)
                                -p 22-2,80 (-p- every port)
    nmap 10.10.0.40/27 -v -Pn -T5 -p 22-25,80
    nmap
    
    
    nc [Options] [Target IP] [Target Port]
      -l listens/opens a port
      nc <ip>< <port> reaches out to that port on that IP
      -z port scanning mode
      -v verbose
      nc -zv localhost 22
      nc -nvzw1
      
      netstat -ntlp ( listening ports)
      
Net Mapping:
  https://git.cybbh.space/net/public/raw/master/modules/networking/slides/images/offensivefinishednetwork.png
wget 10.50.21.41:21   -banner grab ftp server
  -R  ### recursivley grabs everything off server,

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
DATA TRANSFER, MOVEMENT, AND REDIRECTION:
    Common methods for transfering data:
      TFTP:
        RFC 1350 Rev2
        UDP transport
        Extremely small and very simple comms
        no terminal communications ()
        insecure (no auth or encryp)
        no directory services
        used often for tech such as BOOTP and PXE (remote image installs)
      FTP:
       RFC 959
        TCP transport
        Uses mult TCP conn
        Control Conn (21)/ Data Conn(20)
        Auth through clear-txt sign in (user/pass)
        inseucre in default config
        has directory services
        can be enhanced with SSL/TLS (FTPS)
        anon login
        Active
        Passive
      SFTP:
        TCP transp (22)
        uses symmetric/asymmetric encryp
        adds ftp like services to SSH
        auth through sign in or SSH key
        interactive terminal access
      FTPS:
        TCP transp (443)
        adds SSL/TLs encryp to FTP
        auth w/ user/pass and/or PKI
        interactive terminal access
        
      ***SCP:
        TCP transp (22)
        uses auth thru sign in/SSH key
        non interactive
        symm/asymm encryp
        Syntax ex:
          $ scp student@172.16.82.106:secretstuff.txt /home/student     ### download file from remote dir to local dir
          $ scp secretstuff.txt student@172.16.82.106:/home/student     ### upload file to remote dir from local dir
          $ scp -3 student@172.16.82.106:/home/student/secretstuff.txt student@172.16.82.112:/home/student    ### copy file from remote host to other remote host
        SCP Syntax w/ alternate SSHD:
          $ scp -P 1111 student@172.16.82.106:secretstuff.txt /home/student   ### download file from remote dir to local dir
          $ scp -P 1111 secretstuff.txt student@172.16.82.106:/home/student   ### upload file to remote dir from local dir
        SCP Syntax through a tunnel:
          ssh student@172.16.82.106 -L 1111:localhost:22 -NT      ###ssh tunnel
          $ scp -P 1111 student@localhost:secretstuff.txt /home/student   ### download file from a remote dir to local dir
          $ scp -P 1111 secretstuff.txt student@localhost:/home/student   ### upload file to a remote dir from local dir

      Class Ex:
      -r ##3 copies directories
        scp secret.txt  student@172.16.82.106:.   ##3 send secre.txt from my internet host to remote .106 to home directory of student with the same name ( indicated by '.')

  ***Traffic Redirection Tools:
    NETCAT:
      NETCAT: Client to listener file transfer
       Client (sends file): nc 10.2.0.2 9001 < file.txt
       Listener (receive file): nc -l -p 9001 > newfile.txt
      NETCAT: Listener to Client file transfer
       Listener (sends file): nc -l -p 9001 < file.txt
       Client (receive file): nc 10.2.0.2 9001 > newfile.txt

      ****Named pipe:
        mknod mypipe  ( mkfifio mypipe) ### makes named pipe
        
        blue host : nc -lp 3333 > mypile | nc -lp 4444 < mypipe
        blue priv : nc 192.168.1.1 3333 < test
        internet host : nc 172.16.82.106 4444 > secret.txt

      File trans with /dev/tcp: alt to netcat
        nc -l -p 1111 > file.txt
        cat file.txt > /dev/tcp/<IP>/<port>
      
      CTFD:
      Relay Machine:
###Accept connection
dmz:
nc -lp 1234 > mypipe | nc -lp 4444 < mypipe
nc -lp 4321 > mypipe | nc -lp 4444 < mypipe
internet host:
nc 172.16.40.10 4444 > 1steg.jpg
nc 172.16.40.10 4444 > 2steg.jpg
##Waiting for connections/make connection
dmz:
nc 172.16.82.115 6789 > mypipe | nc >internet host> 4444 < mypipe
nc 172.16.82.115 9876 > mypipe | nc <internet host> 4444 < mypipe
internet host:
nc -lp4444 > 4steg.jpg
nc -lp 4444 > 3steg.jpg

  


